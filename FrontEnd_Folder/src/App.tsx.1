import React, { useEffect, useState } from "react";

// ========================
// üîó BACKEND BASE URL
// ========================
const BASE_URL = "http://127.0.0.1:8000"; // change to deployed API if needed

// ========================
// üìò INTERFACES
// ========================
interface Car {
  id: number;
  year: number;
  make?: string;
  model: string;
  price: number;
  mpg_combined: number;
  mileage?: number;
  horsepower?: number;
  image?: string;
}

interface LoanInfo {
  apr_percent: number;
  monthly_payment: number;
  total_paid: number;
  [key: string]: any;
}

// ========================
// ‚öõÔ∏è MAIN COMPONENT
// ========================
const App: React.FC = () => {
  const [cars, setCars] = useState<Car[]>([]);
  const [sortBy, setSortBy] = useState<string>("price");
  const [creditScore, setCreditScore] = useState<number>(720);
  const [loanInfo, setLoanInfo] = useState<LoanInfo | null>(null);
  const [leaseInfo, setLeaseInfo] = useState<any | null>(null);
  const [aprInfo, setAprInfo] = useState<any | null>(null);

  // Compare state
  const [compareIds, setCompareIds] = useState<number[]>([]);
  const [comparePack, setComparePack] = useState<any>(null);

  // Load sorted cars (backend returns {count, results, ...})
  useEffect(() => {
    fetch(`${BASE_URL}/cars?sort_by=${sortBy}&order=asc&limit=50&offset=0`)
      .then((r) => r.json())
      .then((data) => setCars(data.results || data)) // supports both shapes
      .catch(console.error);
  }, [sortBy]);

  // Load demo data for startup display
  useEffect(() => {
    fetch(`${BASE_URL}/demo`)
      .then((r) => r.json())
      .then((data) => {
        setLoanInfo(data.loan);
        setLeaseInfo(data.lease);
        setAprInfo(data.apr);
      })
      .catch(console.error);
  }, []);

  // ========================
  // üí∞ Handlers
  // ========================
  const handleLoan = (car: Car | null) => {
    const price = car?.price || 30000;
    fetch(`${BASE_URL}/loan?price=${price}&credit_score=${creditScore}&months=60`)
      .then((r) => r.json())
      .then(setLoanInfo)
      .catch(console.error);
  };

  const handleLease = (car: Car | null) => {
    const price = car?.price || 30000;
    fetch(`${BASE_URL}/lease?price=${price}&credit_score=${creditScore}&months=36`)
      .then((r) => r.json())
      .then(setLeaseInfo)
      .catch(console.error);
  };

  const handleApr = (car: Car | null) => {
    const price = car?.price || 30000;
    fetch(`${BASE_URL}/apr?price=${price}&credit_score=${creditScore}&months=60`)
      .then((r) => r.json())
      .then(setAprInfo)
      .catch(console.error);
  };

  // ========================
  // üîÅ Compare 2 cars
  // ========================
  const toggleCompare = (id: number) => {
    setCompareIds((prev) => {
      const has = prev.includes(id);
      if (has) return prev.filter((x) => x !== id);
      if (prev.length >= 2) return [prev[1], id]; // keep last + new
      return [...prev, id];
    });
  };

  const runCompare = async () => {
    if (compareIds.length !== 2) return;
    const qs = new URLSearchParams({
      id1: String(compareIds[0]),
      id2: String(compareIds[1]),
      credit_score: String(creditScore),
      months: "60",
      downpayment: "0",
    });
    const r = await fetch(`${BASE_URL}/compare?${qs.toString()}`);
    const data = await r.json();
    setComparePack(data);
  };

  // ========================
  // ‚úâÔ∏è Email quote
  // ========================
  const emailMe = async (carId: number, toEmail: string) => {
    const qs = new URLSearchParams({
      to_email: toEmail,
      car_id: String(carId),
      credit_score: String(creditScore),
      months: "60",
      downpayment: "0",
    });
    const r = await fetch(`${BASE_URL}/share_email?${qs.toString()}`, { method: "POST" });
    const data = await r.json();
    if (data.sent_via === "mailto" && data.mailto) {
      window.location.href = data.mailto; // opens user's email client
    } else if (data.ok) {
      alert("Email sent!");
    } else {
      alert("Could not send email.");
    }
  };

  // ========================
  // üñºÔ∏è UI RENDER
  // ========================
  return (
    <div
      className="p-6 font-sans text-white"
      style={{ background: "#0B0C1A", minHeight: "100vh" }}
    >
      <h1 className="text-3xl font-bold mb-4">üöó Celestial Toyota Selector</h1>

      <div className="flex flex-wrap items-end gap-4 mb-6">
        <label>
          Sort by:&nbsp;
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
            className="text-black"
          >
            <option value="price">Price</option>
            <option value="mpg_combined">MPG</option>
            <option value="mileage">Mileage</option>
            <option value="year">Year</option>
            <option value="horsepower">Horsepower</option>
          </select>
        </label>

        <label>
          Credit Score:&nbsp;
          <input
            type="number"
            value={creditScore}
            onChange={(e) => setCreditScore(Number(e.target.value))}
            className="text-black w-28"
          />
        </label>

        {/* Compare controls */}
        <div className="flex items-center gap-2">
          <span className="opacity-80">Compare (pick 2): {compareIds.join(" & ") || "‚Äî"}</span>
          <button
            onClick={runCompare}
            disabled={compareIds.length !== 2}
            className={`px-3 py-1 rounded ${compareIds.length === 2 ? "bg-yellow-500 text-black" : "bg-gray-600"}`}
          >
            Compare Now
          </button>
        </div>
      </div>

      {/* CAR GRID */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {cars.map((car) => (
          <div
            key={car.id ?? `${car.model}-${car.year}-${car.price}`}
            className="p-4 rounded-lg bg-[#15172B] border border-gray-700"
          >
            {/* Image (provided by backend) */}
            {car.image && (
              <img
                src={car.image}
                alt={`${car.year} ${car.model}`}
                style={{ width: "100%", height: 160, objectFit: "cover", borderRadius: 8, background: "#111" }}
                onError={(e) => {
                  (e.currentTarget as HTMLImageElement).src =
                    `${BASE_URL}/image?make=Toyota&model=${encodeURIComponent(car.model)}&year=${car.year}&angle=29`;
                }}
              />
            )}

            <h3 className="text-xl font-semibold mt-2">
              {car.year} {car.model}
            </h3>
            <p>üíµ ${car.price?.toLocaleString()}</p>
            <p>‚öôÔ∏è {car.horsepower ? `${car.horsepower} HP` : "‚Äî"}</p>
            <p>‚õΩ MPG: {car.mpg_combined}</p>

            <div className="mt-2 flex flex-wrap gap-2">
              <button
                onClick={() => handleLoan(car)}
                className="bg-blue-500 px-3 py-1 rounded"
              >
                Loan
              </button>
              <button
                onClick={() => handleLease(car)}
                className="bg-purple-500 px-3 py-1 rounded"
              >
                Lease
              </button>
              <button
                onClick={() => handleApr(car)}
                className="bg-green-500 px-3 py-1 rounded"
              >
                APR
              </button>

              {/* Compare toggle */}
              {"id" in car && (
                <button
                  onClick={() => toggleCompare(car.id)}
                  className={`px-3 py-1 rounded ${compareIds.includes(car.id) ? "bg-orange-500" : "bg-gray-600"}`}
                >
                  {compareIds.includes(car.id) ? "Selected" : "Compare"}
                </button>
              )}

              {/* Email me */}
              {"id" in car && (
                <button
                  className="bg-teal-500 px-3 py-1 rounded"
                  onClick={() => {
                    const em = prompt("Enter your email to receive this quote:");
                    if (em) emailMe(car.id, em);
                  }}
                >
                  Email Me This
                </button>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* COMPARE RESULT */}
      {comparePack && !comparePack.error && (
        <div className="mt-6 p-4 bg-[#15172B] rounded-lg border border-gray-700 overflow-x-auto">
          <h2 className="text-2xl font-bold mb-3">Compare Result</h2>
          <table className="w-full text-sm">
            <thead>
              <tr>
                <th></th>
                <th>{comparePack.carA.year} {comparePack.carA.model}</th>
                <th>{comparePack.carB.year} {comparePack.carB.model}</th>
              </tr>
            </thead>
            <tbody>
              <tr><td>Price</td><td>${comparePack.carA.price?.toLocaleString()}</td><td>${comparePack.carB.price?.toLocaleString()}</td></tr>
              <tr><td>MPG (combined)</td><td>{comparePack.carA.mpg_combined}</td><td>{comparePack.carB.mpg_combined}</td></tr>
              <tr><td>Horsepower</td><td>{comparePack.carA.horsepower ?? "‚Äî"}</td><td>{comparePack.carB.horsepower ?? "‚Äî"}</td></tr>
              <tr><td>Mileage</td><td>{comparePack.carA.mileage ?? "‚Äî"}</td><td>{comparePack.carB.mileage ?? "‚Äî"}</td></tr>
              <tr><td>Loan (60 mo)</td><td>${comparePack.financeA.monthly_payment}/mo</td><td>${comparePack.financeB.monthly_payment}/mo</td></tr>
            </tbody>
          </table>
          <div className="mt-2 opacity-80">Payment Œî: ${comparePack.diffs.monthly_payment_diff}</div>
        </div>
      )}

      {/* RESULT PANELS */}
      <div className="mt-6 p-4 bg-[#15172B] rounded-lg">
        {loanInfo && (
          <>
            <h2 className="text-2xl font-bold mb-2">Loan Details</h2>
            <pre className="bg-black/30 p-2 rounded text-sm overflow-x-auto">
              {JSON.stringify(loanInfo, null, 2)}
            </pre>
          </>
        )}

        {leaseInfo && (
          <>
            <h2 className="text-2xl font-bold mt-4 mb-2">Lease Details</h2>
            <pre className="bg-black/30 p-2 rounded text-sm overflow-x-auto">
              {JSON.stringify(leaseInfo, null, 2)}
            </pre>
          </>
        )}

        {aprInfo && (
          <>
            <h2 className="text-2xl font-bold mt-4 mb-2">APR Breakdown</h2>
            <pre className="bg-black/30 p-2 rounded text-sm overflow-x-auto">
              {JSON.stringify(aprInfo, null, 2)}
            </pre>
          </>
        )}
      </div>
    </div>
  );
};

export default App;
